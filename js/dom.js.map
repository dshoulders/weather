{"version":3,"sources":["../src/dom.ts"],"names":["fetchSitePeriods","table","getImageIdFromSignificantWeatherId","getCurrentMinute","$","document","querySelector","bind","populateLocationSelector","locations","selector","exeterId","forEach","location","option","createElement","appendChild","createTextNode","name","value","id","attachButtonListener","button","addEventListener","showSelectedSiteForcast","setBackground","photoId","html","style","backgroundImage","displaySitePeriods","periods","forcast","tableHTML","innerHTML","selectedSiteId","params","currentMinute","currentRep","Rep","find","rep","repMinute","parseInt","significantWeatherId","W"],"mappings":"AAAA,SAASA,gBAAT,QAA6C,UAA7C;AAEA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,kCAAT,EAA6CC,gBAA7C,QAAqE,YAArE;AAEA,MAAMC,CAA2C,GAAGC,QAAQ,CAACC,aAAT,CAAuBC,IAAvB,CAA4BF,QAA5B,CAApD;AAEA,OAAO,MAAMG,wBAAwB,GAAIC,SAAD,IAAiC;AACrE,QAAMC,QAA2B,GAAGN,CAAC,CAAC,oBAAD,CAArC;AACA,QAAMO,QAAQ,GAAG,QAAjB;AAEAF,EAAAA,SAAS,CAACG,OAAV,CAAmBC,QAAD,IAAoB;AAClC,UAAMC,MAAM,GAAGT,QAAQ,CAACU,aAAT,CAAuB,QAAvB,CAAf;AACAD,IAAAA,MAAM,CAACE,WAAP,CAAmBX,QAAQ,CAACY,cAAT,CAAwBJ,QAAQ,CAACK,IAAjC,CAAnB;AACAJ,IAAAA,MAAM,CAACK,KAAP,GAAeN,QAAQ,CAACO,EAAxB;AACAV,IAAAA,QAAQ,CAACM,WAAT,CAAqBF,MAArB;AACH,GALD;AAOAJ,EAAAA,QAAQ,CAACS,KAAT,GAAiBR,QAAjB;AACH,CAZM;AAcP,OAAO,MAAMU,oBAAoB,GAAG,MAAM;AACtC,QAAMC,MAAM,GAAGlB,CAAC,CAAC,mBAAD,CAAhB;AACAkB,EAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCC,uBAAjC;AACH,CAHM;AAKP,OAAO,MAAMC,aAAa,GAAGC,OAAO,IAAI;AACpC,QAAMC,IAAI,GAAGvB,CAAC,CAAC,MAAD,CAAd;AAEAuB,EAAAA,IAAI,CAACC,KAAL,CAAWC,eAAX,GAA8B,eAAcH,OAAQ,QAApD;AACH,CAJM;;AAMP,MAAMI,kBAAkB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmC;AAC1D,QAAMC,OAAoB,GAAG5B,CAAC,CAAC,UAAD,CAA9B;AAEA,QAAM6B,SAAS,GAAGhC,KAAK,CAAC8B,OAAD,CAAvB;AAEAC,EAAAA,OAAO,CAACE,SAAR,GAAoBD,SAApB;AACH,CAND;;AAQA,OAAO,MAAMT,uBAAuB,GAAG,YAA2B;AAC9D,QAAMW,cAAc,GAAI/B,CAAC,CAAC,oBAAD,CAAF,CAA+Ce,KAAtE;AAEA,QAAM;AAAEiB,IAAAA,MAAF;AAAUL,IAAAA;AAAV,MAAsB,MAAM/B,gBAAgB,CAACmC,cAAD,CAAlD;AACA,QAAME,aAAa,GAAGlC,gBAAgB,EAAtC,CAJ8D,CAK9D;;AACA,QAAMmC,UAAU,GAAGP,OAAO,CAAC,CAAD,CAAP,CAAWQ,GAAX,CAAeC,IAAf,CAAqBC,GAAD,IAAkB;AACrD,UAAMC,SAAS,GAAGC,QAAQ,CAACF,GAAG,CAACrC,CAAL,CAA1B,CADqD,CAErD;;AACA,WAAOiC,aAAa,GAAGK,SAAhB,IAA6BL,aAAa,GAAGK,SAAS,GAAG,GAAhE;AACH,GAJkB,CAAnB;AAKA,QAAME,oBAAoB,GAAGN,UAAU,CAACO,CAAxC;AACA,QAAMnB,OAAO,GAAGxB,kCAAkC,CAAC0C,oBAAD,CAAlD;AAEAd,EAAAA,kBAAkB,CAAC;AAAEM,IAAAA,MAAF;AAAUL,IAAAA;AAAV,GAAD,CAAlB;AACAN,EAAAA,aAAa,CAACC,OAAD,CAAb;AACH,CAhBM","sourcesContent":["import { fetchSitePeriods, SitePeriod } from './api.js';\r\nimport { Location } from './data.js';\r\nimport { table } from './templates.js';\r\nimport { getImageIdFromSignificantWeatherId, getCurrentMinute } from './utils.js'; \r\n\r\nconst $: (selector: string) => HTMLElement | null = document.querySelector.bind(document);\r\n\r\nexport const populateLocationSelector = (locations: Location[]): void => {\r\n    const selector: HTMLSelectElement = $('.location-selector') as HTMLSelectElement;\r\n    const exeterId = '351413';\r\n\r\n    locations.forEach((location): void => {\r\n        const option = document.createElement('option');\r\n        option.appendChild(document.createTextNode(location.name));\r\n        option.value = location.id;\r\n        selector.appendChild(option);\r\n    });    \r\n\r\n    selector.value = exeterId;\r\n}\r\n\r\nexport const attachButtonListener = () => {\r\n    const button = $('.submit-selection');\r\n    button.addEventListener('click', showSelectedSiteForcast);\r\n}\r\n\r\nexport const setBackground = photoId => {\r\n    const html = $('html');\r\n\r\n    html.style.backgroundImage = `url(\"images/${photoId}.jpg\")`;\r\n}\r\n\r\nconst displaySitePeriods = ({ periods }: SitePeriod): void => {\r\n    const forcast: HTMLElement = $('.forcast');\r\n\r\n    const tableHTML = table(periods);\r\n\r\n    forcast.innerHTML = tableHTML;\r\n}\r\n\r\nexport const showSelectedSiteForcast = async (): Promise<void> => {\r\n    const selectedSiteId = ($('.location-selector') as HTMLSelectElement).value;\r\n\r\n    const { params, periods } = await fetchSitePeriods(selectedSiteId);\r\n    const currentMinute = getCurrentMinute();\r\n    // TODO: bug - currentRep could be in next day [1] Reports if current time is late in the day\r\n    const currentRep = periods[1].Rep.find((rep): boolean => {\r\n        const repMinute = parseInt(rep.$)\r\n        // 180 = 3 hour period\r\n        return currentMinute > repMinute && currentMinute < repMinute + 180;\r\n    }); \r\n    const significantWeatherId = currentRep.W;\r\n    const photoId = getImageIdFromSignificantWeatherId(significantWeatherId); \r\n\r\n    displaySitePeriods({ params, periods });\r\n    setBackground(photoId);\r\n}\r\n"],"file":"dom.js"}